##Adapted from https://github.com/telosys-tools/persistence-springdatajpa-TT210-R2
#set( $uncapitalizedEntityName = $fn.uncapitalize($entity.name) )
#set( $keyFields = $entity.getAttributesByCriteria( $const.KEY ) )
#set( $dataFields = $entity.getAttributesByCriteria( $const.NOT_KEY ) )
#set( $allMappedFields = $fn.concatLists($entity.keyAttributes, $dataFields) )
#if ( $entity.hasCompositePrimaryKey() )
$generator.generate($target.entityName ,  "${entity.name}EntityKey.java", $target.folder, "entity/ENTITY_pk_java.vm"  )
#end
##
package ${ENTITY_PKG};

import java.io.Serializable;

#foreach( $import in $java.imports($entity.attributes) )
import $import;
#end
#foreach( $import in $jpa.imports($entity) )
import $import;
#end
##
$jpa.entityAnnotations(0, $entity)
// Define named queries here
@NamedQueries ( {
  @NamedQuery ( name="${entity.name}.countAll", query="SELECT COUNT(x) FROM ${entity.name}Entity x" )
} )
public class ${entity.name}Entity implements Serializable
{
    private static final long serialVersionUID = 1L;

#if ( $entity.hasCompositePrimaryKey() )
    //----------------------------------------------------------------------
    // ENTITY PRIMARY KEY ( EMBEDDED IN AN EXTERNAL CLASS )  
    //----------------------------------------------------------------------
	@EmbeddedId
    private ${entity.name}EntityKey compositePrimaryKey ;

#else 
    //----------------------------------------------------------------------
    // ENTITY PRIMARY KEY ( BASED ON A SINGLE FIELD )
    //----------------------------------------------------------------------
#foreach( $field in $entity.keyAttributes )
    @Id
    @SequenceGenerator(name="${uncapitalizedEntityName}_$field.formattedName(0)_seq", sequenceName="${uncapitalizedEntityName}_$field.formattedName(0)_seq", allocationSize=1)
    @GeneratedValue(strategy = GenerationType.SEQUENCE, generator="${uncapitalizedEntityName}_$field.formattedName(0)_seq")
    @Column(name="$field.formattedName(0)", nullable=false)
    private $field.formattedType(0) $field.formattedName(0) #if($field.hasInitialValue())= ${field.initialValue} #end;
#end

#end

    //----------------------------------------------------------------------
    // ENTITY DATA FIELDS 
    //----------------------------------------------------------------------    
#foreach( $field in $dataFields )
$jpa.fieldAnnotations(4, $field)
    private $field.formattedType(0) $field.formattedName(0) #if($field.hasInitialValue())= ${field.initialValue} #end;

#end

    public ${entity.name}Entity ()
    {
#if ( $entity.hasCompositePrimaryKey() )        
		this.compositePrimaryKey = new ${entity.name}EntityKey();       
#end
    }


#if ( $entity.hasCompositePrimaryKey() )
    //----------------------------------------------------------------------
    // GETTER & SETTER FOR THE COMPOSITE KEY 
    //----------------------------------------------------------------------
#foreach( $field in $entity.keyAttributes )
#if ( $field.getter )    public $field.type ${field.getter}() { return this.compositePrimaryKey.${field.getter}() ; }
#end
#if ( $field.setter )    public void ${field.setter}( $field.type $field.name ) { this.compositePrimaryKey.${field.setter}( $field.name ) ; }
#end
#end

#else 
    //----------------------------------------------------------------------
    // GETTER & SETTER FOR THE KEY FIELD
    //----------------------------------------------------------------------
#foreach( $field in $entity.keyAttributes )
#if ( $field.getter )    public $field.type ${field.getter}() { return this.$field.name; }
#end
#if ( $field.setter )    public void ${field.setter}( $field.type $field.name ) { this.$field.name = $field.name ; }
#end
#end
#end

    //----------------------------------------------------------------------
    // GETTERS & SETTERS FOR FIELDS
    //----------------------------------------------------------------------
#foreach( $field in $dataFields )
## #if ( $field.isUsedInLinkJoinColumn( $entity.selectedLinks ) != true )
#if ( $field.databaseName )    //--- DATABASE MAPPING : $field.databaseName ( $field.databaseType ) 
#end
#if ( $field.getter )    public $field.type ${field.getter}() { return this.$field.name; }
#if ( $field.setter )    public void ${field.setter}( $field.type $field.name ) { this.$field.name = $field.name; }
#end
#end

## #end  
#end  

$java.toStringMethod($entity, $dataFields, "compositePrimaryKey", 4)
}